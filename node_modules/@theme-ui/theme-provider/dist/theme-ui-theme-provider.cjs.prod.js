'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@theme-ui/core');
var css = require('@theme-ui/css');
var colorModes = require('@theme-ui/color-modes');
var mdx = require('@theme-ui/mdx');
var react = require('@emotion/react');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var RootStyles = function RootStyles() {
  return core.jsx(react.Global, {
    styles: function styles(emotionTheme) {
      var theme = emotionTheme;

      var use = core.__internalGetUseRootStyles(theme);

      if (use.rootStyles === false || theme.styles && !theme.styles.root) {
        return false;
      }

      var boxSizing = theme.useBorderBox === false ? undefined : 'border-box';
      return css.css(_defineProperty({
        '*': {
          boxSizing: boxSizing
        }
      }, use.scope, {
        margin: 0,
        variant: 'styles.root'
      }))(theme);
    }
  });
};

var ThemeProvider = function ThemeProvider(_ref) {
  var theme = _ref.theme,
      components = _ref.components,
      children = _ref.children;
  var outer = core.useThemeUI();

  if (typeof outer.setColorMode === 'function') {
    return core.jsx(core.ThemeProvider, {
      theme: theme
    }, core.jsx(mdx.MDXProvider, {
      components: components,
      children: children
    }));
  }

  return core.jsx(core.ThemeProvider, {
    theme: theme
  }, core.jsx(colorModes.ColorModeProvider, null, core.jsx(RootStyles), core.jsx(mdx.MDXProvider, {
    components: components,
    children: children
  })));
};

exports.ThemeProvider = ThemeProvider;
