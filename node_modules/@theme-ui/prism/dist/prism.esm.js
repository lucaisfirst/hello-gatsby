import Highlight, { defaultProps } from 'prism-react-renderer';
import { jsx, Themed } from 'theme-ui';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var aliases = {
  js: 'javascript',
  sh: 'bash'
};

var isInRange = function isInRange(start, end, num) {
  if (num >= start && num <= end) {
    return true;
  }

  return false;
};

var checkRanges = function checkRanges(range, num) {
  for (var i = 0; i < range.length; i += 2) {
    if (isInRange(range[i], range[i + 1], num)) {
      return true;
    }
  }

  return false;
};

function ThemeUIPrism(_ref) {
  var children = _ref.children,
      outerClassName = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className"]);

  var _outerClassName$repla = outerClassName.replace(/language-/, '').split(' '),
      language = _outerClassName$repla[0];

  var lang = aliases[language] || language;
  var startEndRangesToHighlight = [];
  var countHighlightCommentsRemoved = 0;

  var findStartAndEndHighlights = function findStartAndEndHighlights(tokens) {
    var tokensWithoutHighlightComments = tokens.filter(function (item, index) {
      var removeLine = item.map(function (_ref2) {
        var content = _ref2.content;

        if (content.trim() === '// highlight-start') {
          /**
           * Track highlighted lines, including countHighlightCommentsRemoved
           * so we can keep track of multiple highlight-start and highlight-end blocks.
           * */
          startEndRangesToHighlight.push(index - countHighlightCommentsRemoved);
          countHighlightCommentsRemoved += 1;
          return true;
        }

        if (content.trim() === '// highlight-end') {
          /**
           * Subtract by (countHighlightCommentsRemoved + 1) to account for
           * the current highlight-end block being removed.
           * */
          startEndRangesToHighlight.push(index - (countHighlightCommentsRemoved + 1));
          countHighlightCommentsRemoved += 1;
          return true;
        }
      }).filter(Boolean)[0];

      if (!removeLine) {
        return item;
      }
    });
    return tokensWithoutHighlightComments;
  };

  var isStartEndHighlighted = function isStartEndHighlighted(index) {
    return checkRanges(startEndRangesToHighlight, index);
  };

  var isInlineHighlighted = function isInlineHighlighted(line) {
    var regex = new RegExp('// highlight-line$');

    for (var _iterator = _createForOfIteratorHelperLoose(line), _step; !(_step = _iterator()).done;) {
      var token = _step.value;

      if (regex.test(token.content)) {
        token.content = token.content.replace(regex, ''); // remove the highlight-line comment now that we've acted on it

        return true;
      }
    }

    return false;
  };

  var shouldHighlightLine = function shouldHighlightLine(line, index) {
    return isStartEndHighlighted(index) || isInlineHighlighted(line);
  };

  return jsx(Highlight, Object.assign({}, defaultProps, props, {
    code: children.trim(),
    language: lang,
    theme: undefined
  }), function (_ref3) {
    var className = _ref3.className,
        style = _ref3.style,
        tokens = _ref3.tokens,
        getLineProps = _ref3.getLineProps,
        getTokenProps = _ref3.getTokenProps;
    var tokensWithoutHighlightComments = findStartAndEndHighlights(tokens);
    return jsx(Themed.pre, {
      className: outerClassName + " " + className,
      style: style
    }, tokensWithoutHighlightComments.map(function (line, i) {
      var lineProps = getLineProps({
        line: line,
        key: i
      });

      if (shouldHighlightLine(line, i)) {
        lineProps.className = lineProps.className + " highlight";
      }

      return jsx("div", Object.assign({}, lineProps), line.map(function (token, key) {
        return jsx("span", Object.assign({}, getTokenProps({
          token: token,
          key: key
        }), {
          sx: token.empty ? {
            display: 'inline-block'
          } : undefined
        }));
      }));
    }));
  });
}

export default ThemeUIPrism;
//# sourceMappingURL=prism.esm.js.map
